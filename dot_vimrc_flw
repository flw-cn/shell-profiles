" vim: set filetype=vim foldmethod=marker:
" flw 的 vimrc
" flw <flw@cpan.org>
"
" 常规设置（编辑与外观）--------------------------{{{

" 不兼容 vi
set nocompatible
" 用空格代替 TAB
set expandtab
" 整体左移或者右移时，每次 4 个空格
set shiftwidth=4
" TAB 键按 4 空格对齐
set tabstop=4
set softtabstop=4
set smarttab

if ( has("mac") )
    " 对于 Unicode 字符中，宽度含义有歧义的字符，统统显示为双字节宽
    set ambiwidth=double
endif

" 和系统剪切板交互
set clipboard=unnamed

" 文件写入成功后，不保留备份文件
set nobackup
" 直接写原文件，不先建立备份
set nowritebackup
" 不要交换文件
set noswapfile

" C 语法格式的自动缩进
set cindent
" 据说比 cindent 还好用。
set smartindent
" 自动缩进
set autoindent

" 在状态栏显示正在输入的命令
set showcmd

" c 指令（change）时，末尾显示 $ 符号
set cpoptions+=$

" 光标移动距离屏幕顶部或底部 10 行时，开始滚动
set scrolloff=10

" 打开命令行补全菜单（出现在状态栏上）
set wildmenu
" 总是显示 ruler 行。
set ruler
" 命令行高度
set cmdheight=1

" 用退格键可以删除自动缩进、换行符、越过编辑起始点
set backspace=indent,eol,start

" 出错时不出声
set noerrorbells
set novisualbell
set t_vb=

" 关闭碍眼的高亮显示配对括号
let loaded_matchparen = 1

" 仅在 Normal 模式和 Visual 模式下才可以用鼠标
" 这意味着要想用鼠标复制到剪切板的话，只需要按
" i 进入插入模式，或者按 : 进入命令行模式就可以了。
set mouse=nv

" 高亮刚刚搜索的字符串
set hlsearch
" 递增搜索，即在输入的过程中就开始搜索，不必要按下回车
set incsearch

" 为 20 个文件保存位置标记（书签），
" 每个寄存器最多保存 50 行内容，且大小不能超过 10k
" 另外，打开文件时，不高亮显示上次关闭前搜索过的字符串
set viminfo='20,<50,s10,h

if version >= 700
    " 在左侧显示行号
    set number
endif

" 开启光棒
set cursorline

if version >= 700
    " 只有当存在多个标签页时，才显示标签行。
    set showtabline=1
endif

" 只有当存在多个窗口时，才显示状态栏。
set laststatus=1
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l/%L:%c

set tags=./tags;,tags;
" 请先用 cd /usr/include && sudo ctags -R `pwd` 命令生成 tags 文件。
if filereadable("/usr/include/tags")
    set tags+=/usr/include/tags
endif

" Ctrl+] 时出现选择列表而不是自动跳到第一个。
set cst

if version >= 700
    set completeopt=longest,menuone
endif

" 按语法折叠，有 BUG，括号不匹配时会导致着色不正常。
autocmd FileType perl,c,cpp,python set foldmethod=syntax
" 最多折叠两层（一层函数，一层大流程控制），多了用处不大。
set foldnestmax=2
" 缺省不折叠
set nofoldenable

let perl_fold = 1
let perl_fold_blocks = 1
let perl_nofold_packages = 1

" 设置一堆编码种类吧
set fileencodings=utf-8,gbk,big5,euc-jp

" 关闭拼写检查
set nospell

"}}}

" Vim 插件管理 {{{
filetype off        " 注意必须要有这一行

if has("win32")
    " 加载 Vim Vundle
    set rtp+=~/vimfiles/bundle/Vundle.vim/
    " 设置安装插件的位置
    call vundle#begin('~/vimfiles/bundle')
else
    " 加载 Vim Vundle
    set rtp+=~/.vim/bundle/Vundle.vim
    " 设置安装插件的位置
    call vundle#begin('~/.vim/bundle')
endif

" 让 Vundle 把自身也管起来。这一句是必须的。
Plugin 'gmarik/Vundle.vim'

" 久经考验的插件，喜欢得不得了
Plugin 'vimwiki/vimwiki'
Plugin 'gabrielelana/vim-markdown'      " 貌似没有 markdown 插件 vimwiki 反而工作的更好？
Plugin 'mattn/calendar-vim'
Plugin 'yegappan/mru'
Plugin 'jlanzarotta/bufexplorer'
" Plugin 'taglist.vim'
Plugin 'mbbill/VimExplorer'
if ( has("unix") ) | Plugin 'nsf/gocode', { 'rtp': 'vim/' } | endif
Plugin 'ervandew/supertab'

" 仍在积累使用经验当中的插件
Plugin 'mattn/emmet-vim'
Plugin 'godlygeek/tabular'

Plugin 'pangloss/vim-javascript'
Plugin 'jsx/jsx.vim'

Plugin 'groenewege/vim-less'

" 试用中的插件
" if ( has("unix") ) | Plugin 'Valloric/YouCompleteMe' | endif
if ( has("unix") && has("lua") ) | Plugin 'Shougo/neocomplete.vim' | endif
Plugin 'dgryski/vim-godef'
Plugin 'fatih/vim-go'
Plugin 'majutsushi/tagbar'

Plugin 'Shutnik/jshint2.vim'
let g:jshint2_command = 'jsxhint'

Plugin 'kien/ctrlp.vim'
"Plugin 'SirVer/ultisnips'

Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'

" 所有的 Plugin 都必须写在 vundle#begin() 和 vundle#end() 之间。
call vundle#end()            " 必须
filetype plugin indent on    " 必须
" }}}

" 颜色设置 ----------------------------{{{

" 启动语法识别
syntax on

if has("gui_running")
    colorscheme darkblue

    hi Visual                       guibg=Yellow
    hi Folded       guifg=#CCCCCC   guibg=#900090
    hi FoldColumn   guifg=#CCCCCC   guibg=#900090
    hi DiffText                     guibg=#CC0000
    hi CursorLine                   guibg=#000060
else
    colorscheme flwcolor
endif

" 对其它颜色对修正
autocmd FileType html hi link htmlHead Normal

"}}}

" 自动命令 -----------------------------{{{

" 打开文件时，按照 viminfo 保存的上次关闭时的光标位置重新设置光标
autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" squid 源代码存在“恶心的 TAB 与 space 混排问题”，因此需要特别设置一下
autocmd BufReadPost */*squid*/* setlocal ts=8 sts=8 sw=8

" vim 自带的 Erlang 的插件不能识别 hrl 文件？
autocmd BufNewFile,BufRead *.hrl setlocal ft=erlang

" Dancer 常见的 .tt 后缀需要标注成 HTML 语法
autocmd BufNewFile,BufRead *.tt setlocal ft=html

" Golang 支持
autocmd BufNewFile,BufRead *.go setlocal ft=go

" QuickFix 窗口中不需要行号
autocmd FileType qf set nonumber

" 插入模式下不需要光棒
autocmd InsertEnter * setlocal nocursorline
autocmd InsertLeave * setlocal cursorline

" 只有当前窗口才显示光棒
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline

autocmd FileType c,cpp setlocal path=.,/usr/local/include,/usr/include

augroup filetypedetect
    autocmd! BufRead,BufNewFile *.p6 setfiletype perl6
augroup END

"}}}

" 自定义快捷键 ----------------------------{{{

if ( has("unix") )
    " 把我的 Linux 环境下的功能键给激活
    exec "set <S-F1>=\033[23~"
    exec "set <S-F2>=\033[24~"
    exec "set <S-F3>=\033[25~"
    exec "set <S-F4>=\033[26~"
    exec "set <S-F5>=\033[28~"
    exec "set <S-F6>=\033[29~"
    exec "set <S-F7>=\033[31~"
    exec "set <S-F8>=\033[32~"
    exec "set <S-F9>=\033[33~"
    exec "set <S-F10>=\033[34~"
endif

" gF 在新窗口打开光标下的文件名
nmap gF <C-W>f

" 对于 vim 7.x 来说，可以让文件在新标签页打开
if version >= 700
    nmap <silent> gf <C-W>gf:tabmove<CR>
endif

" F3 开启/关闭粘贴模式，这个是老习惯了
set pastetoggle=<F3>

" Dieken 的功能
" nnoremap <F2> :g//laddexpr expand("%") . ":" . line(".") . ":" . getline(".")<CR>:lopen<CR>
" nnoremap <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR><CR>

" F4 做这个挺浪费的，又不常用，可以考虑去掉
map <F4> :%s/\s\+$//g<CR>:noh<CR>''

" 编辑 C/Makefile/Perl/Config/Shell 等许多格式的文件时，输入 # 字符后 vim
" 都会自作聪明地删除该行的自动缩进(如果有的话)，这样很不好，尤其是编辑 Perl
" 程序加入注释时。因此用下面的映射来“留”住 # 字符。（发现有 BUG，不过凑合能用）
inoremap # X#<LEFT><C-H><RIGHT>

" 有了这些映射，查找函数就更加方便了。
if version >= 700
    nmap <silent> <F12>s :tab cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>g :tab cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>c :tab cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>t :tab cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>e :tab cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>f :tab cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <silent> <F12>i :tab cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <silent> <F12>d :tab cs find d <C-R>=expand("<cword>")<CR><CR>
else
    nmap <silent> <F12>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <silent> <F12>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <silent> <F12>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <silent> <F12>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

"}}}

" 快速切换头文件和源代码 -----------------------------{{{
" 非常好用！
function! FlwSwitchHeaderAndSource()
    let basename = expand( "%:r" )
    let ext = expand( "%:e" )
    if ( ext == "c" || ext == "cpp" ) && filereadable( basename . ".h" )
        execute "edit " . basename . ".h"
    elseif ( ext == "c" || ext == "cpp" ) && filereadable( basename . ".hpp" )
        execute "edit " . basename . ".hpp"
    elseif ( ext == "h" || ext == "hpp" ) && filereadable( basename . ".c" )
        execute "edit " . basename . ".c"
    elseif ( ext == "h" || ext == "hpp" ) && filereadable( basename . ".cpp" )
        execute "edit " . basename . ".cpp"
    endif
endfunction

autocmd FileType c,cpp nmap <silent> <F2> :call FlwSwitchHeaderAndSource()<CR>
"}}}

" 聪明的映射 -----------------------------{{{

" 跟移动光标一样整体移动行。
nmap <C-j> mz:m+<cr>`z
nmap <C-k> mz:m-2<cr>`z
vmap <C-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Visual 模式下用 TAB 来缩进代码
vmap <silent> <TAB>     >gv
vmap <silent> <S-TAB>   <gv

" Visual 模式下用 c 和 C 来注释、取消注释代码
autocmd FileType perl vmap <silent> c :<BS><BS><BS><BS><BS>let FlwSearchBak=@/\|'<,'>s/^/#/gi\|call histdel("search", -1)\|let @/ = FlwSearchBak<CR>
autocmd FileType perl vmap <silent> C :<BS><BS><BS><BS><BS>let FlwSearchBak=@/\|'<,'>s/^#//gi\|call histdel("search", -1)\|let @/ = FlwSearchBak<CR>
autocmd FileType vim vmap <silent> c :<BS><BS><BS><BS><BS>let FlwSearchBak=@/\|'<,'>s/^/"/gi\|call histdel("search", -1)\|let @/ = FlwSearchBak<CR>
autocmd FileType vim vmap <silent> C :<BS><BS><BS><BS><BS>let FlwSearchBak=@/\|'<,'>s/^"//gi\|call histdel("search", -1)\|let @/ = FlwSearchBak<CR>
autocmd FileType javascript,c,cpp vmap <silent> c :<BS><BS><BS><BS><BS>let FlwSearchBak=@/\|'<,'>s/^/\/\//gi\|call histdel("search", -1)\|let @/ = FlwSearchBak<CR>
autocmd FileType javascript,c,cpp vmap <silent> C :<BS><BS><BS><BS><BS>let FlwSearchBak=@/\|'<,'>s/^\/\///gi\|call histdel("search", -1)\|let @/ = FlwSearchBak<CR>

" }}}

" QuickFix 增强 ------------------------------{{{

" 用井号来打开/关闭 quickfix 窗口
nmap <silent> # :vimgrep <cword> %<CR>:cw<CR>
nmap <silent> g# :vimgrep <cword> *.c *.h *.pl *.pm<CR>:cw<CR>
autocmd FileType qf :nmap <buffer><silent> # :windo 2match none<CR>:q<CR>

" quick fix 窗口中可以预览
autocmd FileType qf :nnoremap <buffer><silent> v <CR>zz:setlocal cul<CR>:wincmd p<CR>
"autocmd FileType qf :nnoremap <buffer><silent> v <CR>zz:exec "2match FlwQfCurLine /\\%" . line(".") . "l/"<CR>:wincmd p<CR>
autocmd FileType qf :nnoremap <buffer><silent> <CR> <CR>
autocmd FileType qf :setlocal cursorline

" 可以跳转 quick fix 窗口中的内容
nmap <silent> <F9>     :cn<CR>:exec "2match FlwQfCurLine /\\%" . line(".") . "l/"<CR>
nmap <silent> <S-F9>   :cp<CR>:exec "2match FlwQfCurLine /\\%" . line(".") . "l/"<CR>

" }}}

" 下面是一些窗口操作的增强 -----------------------------------{{{

" 不错的映射，这下用标签页方便多了。
nmap <C-N>      gt
nmap <C-P>      gT

" Normal 模式下用 TAB 键切换当前窗口。
nmap <silent> <TAB>     <C-W>w
nmap <silent> <S-TAB>   <C-W>p

" 用上下左右键来调整窗口大小
" nmap <silent> <Left>  <C-W><:unlet! t:flwwinlayout<CR>
" nmap <silent> <Right> <C-W>>:unlet! t:flwwinlayout<CR>
" nmap <silent> <Up>    <C-W>+:unlet! t:flwwinlayout<CR>
" nmap <silent> <Down>  <C-W>-:unlet! t:flwwinlayout<CR>

" 窗口放大缩小，模仿 Turbo C 风格的。
function! FlwSaveOrRestoreLayout()
    if exists("t:flwwinlayout")
        execute t:flwwinlayout
        unlet t:flwwinlayout
    else
        let t:flwwinlayout=winrestcmd()
        execute "normal \<C-W>_\<C-W>|"
    endif
endfunction
nmap <silent> <F11> :call FlwSaveOrRestoreLayout()<CR>
imap <silent> <F11> <ESC>:call FlwSaveOrRestoreLayout()<CR>a

" 交换两个窗口，这个不太常用
" nmap <F7> <C-W>x

" }}}

" 各位 vim 朋友，下面这些快捷键过于个性化，请酌情留用 -------------------{{{

" 下面一些映射用到了逗号，会掩盖原有的逗号的含义，因此用两个逗号来完成原来的逗号的功能。
nnoremap <silent> ,, ,

" Q 不保存退出，X 保存退出
nmap Q :q!<CR>
nmap X :x<CR>

" 我老是习惯用 Ctrl+O 跳回原来，但是不如 Ctrl+T 好使。这么一映射，好使多了。
nmap <C-O> <C-T>

" 试试看把 0 改成 ^ 效果怎么样。
map 0 ^
noremap ) 0

" F 开启 Buffer Explorer
nmap F :BufExplorer<CR>
nnoremap <silent> ,F F
nnoremap <silent> ,f F
autocmd BufEnter \[BufExplorer\] nmap <buffer><silent> F q

" Tag List 打开以后，光标停留在 Tag List 窗口
let g:Tlist_GainFocus_On_ToggleOpen=1
" T 开启/关闭 taglist/tagbar
" nnoremap <silent> T :TlistToggle<CR>
" 用 TAB 键可以从 tag list 窗口跳出来
" autocmd BufEnter __Tag_List__ nnoremap <buffer><silent> <TAB> :wincmd w<CR>

" T 开启/关闭 tagbar
nnoremap <silent> T :TagbarToggle<CR>

" M 开启/关闭 MRU
nmap <silent> M :MRU<CR>
nnoremap <silent> ,M M
autocmd BufEnter __MRU_Files__ nnoremap <buffer><silent> M :q<CR>

" C 开启/关闭日历
nmap <silent> C :Calendar<CR>
nnoremap <silent> ,C C
autocmd BufEnter __Calendar nnoremap <buffer><silent> C :q<CR>

" 空格键勾上或者去掉 TODO LIST 项目
autocmd FileType vimwiki map <buffer><silent> <Space> <Plug>VimwikiToggleListItem

" 在 Vimwiki 中，让插入模式的 TAB 键更智能
" TODO ...

" }}}

" Windows 专用 --------------------------{{{

if ( has("win32") )
    nmap <M-Space> :simalt ~<CR>
    autocmd EncodingChanged * if &encoding == "utf-8" | so $VIMRUNTIME/delmenu.vim | so $VIMRUNTIME/menu.vim | language message zh_CN.UTF-8 | endif
    autocmd EncodingChanged * if &encoding == "cp936" | so $VIMRUNTIME/delmenu.vim | so $VIMRUNTIME/menu.vim | language message zh_CN | endif
    nmap <A-1> 1gt
    nmap <A-2> 2gt
    nmap <A-3> 3gt
    nmap <A-4> 4gt
    nmap <A-5> 5gt
    nmap <A-6> 6gt
    nmap <A-7> 7gt
    nmap <A-8> 8gt
    nmap <A-9> 9gt
    nmap <A-0> 10gt
endif

"}}}

" 文件类型设置 --------------------------{{{
""" Haskell
" 把 True 和 False 识别为关键字而不是普通的标识符
let hs_highlight_boolean = 1
" 把基本类型的名字识别为关键字
let hs_highlight_types = 1
" 把更多相对常用的类型识别为关键字
let hs_highlight_more_types = 1
" 高亮调试函数的名字
let hs_highlight_debug = 1

" tab=2 spaces 效果更佳
autocmd FileType haskell,lhaskell,yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2

"}}}

" 第三方插件设置 --------------------------{{{
" 插件的快捷键设置请参考上面的“自定义快捷键”部分，
" 这里只列出插件的其它设置

" Vimwiki ----{{{
highlight VimwikiBold cterm=bold,reverse
let g:vimwiki_use_mouse         = 1     " 支持鼠标
let g:vimwiki_camel_case        = 0     " 不再采用骆驼表示法自动识别条目
let g:vimwiki_folding           = 1     " 开启折叠功能
let g:vimwiki_fold_lists        = 1     " 列表也要折叠
let g:vimwiki_hl_headers        = 1     " 章节标题高亮支持
let g:vimwiki_hl_cb_checked     = 1     " 已完成的 TODO 项变灰
let g:markdown_enable_spell_checking = 0 " 关闭 VimWiki 中的 MarkDown 的拼写检查

let g:vimwiki_ext2syntax = {'.mkd': 'markdown', '.wiki': 'default'}

" 定义第一个 wiki
let wiki1 = {}
let wiki1.path              = '~/vimwiki/'
let wiki1.path_html         = '~/vimwiki/html/'
let wiki1.syntax            = 'markdown'
let wiki1.ext               = '.mkd'

let wiki1.nested_syntaxes = {'python': 'python', 'c': 'c', 'sh': 'sh', 'perl': 'perl', 'scheme': 'scheme', 'yaml': 'yaml'}


" 以后可以如法炮制定义更多的 wiki

" 定义 wiki 列表
let g:vimwiki_list = [wiki1]

" 下面是对 VimWiki 打的一个补丁，目的是为了让它能够更好地支持 Markdown
" 链接语法。官方的插件不支持 [文章]() 这样的内部链接语法。
" 而这种语法是唯一能够打通 VimWiki 和 Jekyll 的关键。
" 注意这个补丁只有当 wiki 语法是 Markdown 时才应该启用。
" 可以通过下面的 autocmd 来控制。
function! FlwPatchVimwiki()
    let g:vimwiki_rxFlwMarkdownLinkPrefix = '['
    let g:vimwiki_rxFlwMarkdownLinkSuffix = ']()'
    " [DESCRIPTION]()
    " let g:vimwiki_MarkdownLinkTemplate = g:vimwiki_rxMarkdownLinkPrefix . '__LinkUrl__'.
    "      \ g:vimwiki_rxMarkdownLinkSuffix

    let magic_chars = '.*[]\^$'
    let valid_chars = '[^\\]'

    let g:vimwiki_rxFlwMarkdownLinkPrefix = escape(g:vimwiki_rxFlwMarkdownLinkPrefix, magic_chars)
    let g:vimwiki_rxFlwMarkdownLinkSuffix = escape(g:vimwiki_rxFlwMarkdownLinkSuffix, magic_chars)
    let g:vimwiki_rxFlwMarkdownLinkUrl = valid_chars.'\{-}'

    " 1. [DESCRIPTION]()
    let g:vimwiki_rxFlwMarkdownLink = g:vimwiki_rxFlwMarkdownLinkPrefix.
          \ g:vimwiki_rxFlwMarkdownLinkUrl . g:vimwiki_rxFlwMarkdownLinkSuffix

    let g:vimwiki_rxFlwMarkdownLinkMatchUrl = g:vimwiki_rxFlwMarkdownLinkPrefix.
          \ '\zs' . g:vimwiki_rxFlwMarkdownLinkUrl . '\ze' . g:vimwiki_rxFlwMarkdownLinkSuffix

    let g:vimwiki_rxFlwMarkdownLinkMatcDescr = g:vimwiki_rxFlwMarkdownLinkMatchUrl

    let g:vimwiki_rxWikiLink = g:vimwiki_rxFlwMarkdownLink
    let g:vimwiki_rxWikiLinkMatchUrl = g:vimwiki_rxFlwMarkdownLinkMatchUrl
    let g:vimwiki_rxWikiLinkMatchDescr = g:vimwiki_rxFlwMarkdownLinkMatcDescr
endfunction

" 可以通过注释掉下面这行代码来取消应用补丁。
autocmd FileType vimwiki call FlwPatchVimwiki()
" }}}

" taglist ----{{{
" 让 taglist 对普通的 txt 文件也能够生成目录
let tlist_txt_settings = 'txt;c:content;f:figures;t:tables'
au BufRead,BufNewFile *.txt setlocal ft=txt
" 让 taglist 对 vimwiki 文件也能够生成目录
let tlist_vimwiki_settings = 'wiki;c:content'

hi MyTagListFileName guifg=black guibg=grey
" }}}

" tagbar ----{{{
" 设置 tagbar 出现在屏幕左边。
let g:tagbar_left=1
if has("win32")
    let g:tagbar_iconchars = ['+', '-']  " (default on Windows)
else
    let g:tagbar_iconchars = ['➢', '▾']  " 备用字符：  ▸
endif
" }}}

" MRU ----{{{
let MRU_Max_Entries = 500           " 500 个文件，足够用了吧。关键是要把一些没用的过滤掉
let MRU_Window_Height = 10          " 窗口高度设置成 10 个文件吧
let MRU_Add_Menu = 0                " 不需要菜单
" let MRU_Include_Files = ''        " 需要精心设计一下，结合 Include 和 Exclude，控制好文件数量，这样查找起来就更方便了。
let MRU_Exclude_Files = '\.wiki$\|^/tmp/.*\|^/var/tmp/.*\|^.:\\Documents and Settings\\.*\\Local Settings\\Temp\.*'

au BufEnter __MRU_Files__ setl cul  " MRU 窗口内还是有个光棒比较好
au BufEnter __MRU_Files__ setl nonu " MRU 窗口里面就不要数字了
" }}}

" NeoComplCache + SuperTab 实现自动完成 ----{{{
let g:acp_enableAtStartup = 0                           " 禁用自动弹出
let g:neocomplcache_enable_at_startup = 1               " 启动时就打开本插件
let g:neocomplcache_disable_auto_complete = 1           " 但是缺省不提示自动完成（由 SuperTab 激活自动完成）
let g:neocomplcache_enable_smart_case = 1               " 智能判断大小写
let g:neocomplcache_enable_camel_case_completion = 1    " 骆驼表示法的自动完成
let g:neocomplcache_enable_underbar_completion = 1      " 下划线自动完成
let g:neocomplcache_enable_auto_select = 1              " 缺省就第一个
let g:SuperTabDefaultCompletionType = '<C-X><C-O>'      " 设置 SuperTab 使其和 NeoComplCache 联动

" Plugin key-mappings.
imap <silent><C-j> <Plug>(neocomplcache_snippets_expand)

"}}}

" Godef ----{{{
let g:godef_split=3
" }}}

" CtrlP ----{{{
let g:ctrlp_map = '<Right>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
" }}}

"}}}

" 自己写的插件 -----------------------------------{{{

""" 本人写的非常牛逼的 K 功能重载代码，可以在 vim 内部显示各种语言的帮助
""" gK 则在新标签页内打开帮助
function! FlwHelpHelper( where )
    " 先拿下光标下的文字
    let l:word = expand( "<cWORD>" )

    " 再取出疑似函数名/模块名的部分和疑似方法的部分
    let l:lists = matchlist( l:word, "\\([_a-zA-Z0-9:]\\+\\)\\(->\\([_a-zA-Z0-9]\\+\\)\\)\\?" )

    let l:name = l:lists[1]
    let l:method = l:lists[3]

    let l:progList = []

    if &ft == "perl"
        if match( l:name, "::" ) != -1
            " 函数里是不可能有 :: 的，不用想了，一定是模块
            let l:progList += [ [ "perldoc -u ", "pod" ] ]
        elseif strlen( l:method )
            " 有方法的，一定是模块了
            let l:progList += [ [ "perldoc -u ", "pod" ] ]
        elseif match( l:name, "[A-Z]" ) != -1
            " 有大写字母，那一定是模块了，Perl buildin 函数的名称全都是小写字母的
            let l:progList += [ [ "perldoc -u ", "pod" ] ]
        else
            " 剩下的，有可能是函数，也有可能是模块，
            " 但是考虑到这样的模块较少，因此先优先查函数
            let l:progList += [ [ "perldoc -u -f ", "pod" ], [ "perldoc -u ", "pod" ] ]
        endif
    endif

    if &ft == "python"
         let l:progList += [ [ "python -c \"import sys; a = sys.argv[-1]; b = a.find('.') > -1 and 1 or 0; m = b == 1 and '.'.join(a.split('.')[:-1]) or a; exec( 'import '+m+';help('+a+')' )\" ", "man" ] ]
    endif

    if &ft == "go"
         let l:progList += [ [ "godoc ", "man" ] ]
    endif

    if &ft == "erlang"
        if match( l:name, ":" ) != -1
            " erlang 的模块方法
            let l:lists = matchlist( l:name, "\\([_a-zA-Z0-9:]\\+\\):\\([_a-zA-Z0-9]\\+\\)" )
            let l:name = l:lists[1]
            let l:method = l:lists[2]
        endif
        let l:progList += [ [ "PAGER=\"col -b\" erl -man ", "man" ] ]
    endif

    let l:progList += [ [ "PAGER=\"col -b\" man 3 ", "man" ] ]
    let l:progList += [ [ "PAGER=\"col -b\" man 2 ", "man" ] ]
    let l:progList += [ [ "PAGER=\"col -b\" man ", "man" ] ]

    let l:found = 0
    " 下面调用外部命令，取帮助信息
    for l:prog in l:progList
        let l:progName = l:prog[0]
        let l:fileType = l:prog[1]
        let l:cmd = l:progName . l:name
        let l:lines = system( l:cmd )
        if !v:shell_error
            if a:where ==? "inNewTab"
                tabe
            elseif a:where ==? "Vertical"
                rightbelow new
            else
                above new
            endif
            setlocal buftype=nofile
            setlocal ts=8
            execute "setlocal ft=" . l:fileType
            call append( 0, split( l:lines, "\n" ) )
            normal gg
            if strlen(l:method)
                if l:fileType == "pod"
                    call search( "\\(=\\(item\\|head\\)\\d*\\s\\+\\)\\@<=" . l:method . "\\>" )
                elseif l:fileType == "man"
                    call search( "\\(^\\s\\+\\)\\@<=" . l:method . "\\>" )
                endif
                normal zt
            endif
            let l:found = 1
            break
        endif
    endfor

    if !l:found
        echohl ErrorMsg | echomsg "没有帮助信息。" | echohl None
    endif

endfunction

autocmd FileType c,perl,erlang,python,go nmap <silent> K :call FlwHelpHelper( "" )<CR>
autocmd FileType c,perl,erlang,python,go nmap <silent> gK :call FlwHelpHelper( "InNewTab" )<CR>

"}}}

" 本人写的非常袖珍的 svn diff 功能，flw 很得意的创意 ---------{{{
""" 按 F8 查看本次修改
function! FlwSvnDiffToggle()
    if bufexists( "__SVN_DIFF__" )
        bwipeout __SVN_DIFF__
    else
        if exists("t:flwsvndiff")
            diffoff!
            let l:fileName = t:flwsvndiff
            unlet t:flwsvndiff
            exec "bwipeout " . l:fileName
        else
            let t:flwsvndiff = expand("%:p:h") . "/.svn/text-base/" . expand("%:t") . ".svn-base"
            let l:ft = &ft
            exec "silent vert diffsplit " . t:flwsvndiff
            setlocal readonly
            setlocal nomodifiable
            setlocal buftype=nofile
            exec "set ft=" . l:ft
            setlocal fdm=diff
            wincmd p
            autocmd VimResized * :wincmd =
        endif
    endif
endfunction

" 绑定 F8 成为开启、关闭 svn diff 效果的快捷键
nmap <silent> <F8> :call FlwSvnDiffToggle()<CR>
nmap <silent> <S-F8> :new __SVN_DIFF__ <CR>:read !svn diff<CR>:setlocal syntax=diff buftype=nofile<CR>gg

"}}}

" 有关着色的两个小发明 ---------{{{
function! DefineHighlightx( name, fgcolor, bgcolor, attr )
    exec "hi " . a:name . " ctermfg=" . a:fgcolor . " ctermbg=" . a:bgcolor . " cterm=" . a:attr
endfunction

function! Coloritx( name, startline, startcol, endline, endcol )
    let pat = "\\%" . a:startline . "l\\%" . a:startcol . "c.*\\%" . a:endline . "l\\%" . a:endcol . "c"
    call matchadd( a:name, pat )
endfunction
"}}}

" 缩写与改写 -----------------------------------{{{

" 插入日期
iab xdate <c-r>=strftime("%Y/%m/%d %H:%M:%S")<cr>

" 我的邮箱
iab eml flw@cpan.org
iab gml su2admin@gmail.com

"}}}
